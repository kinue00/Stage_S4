#include "mbed.h"
#include "mbed_trace.h"
#include "mbed_events.h"
#include "LoRaWANInterface.h"
#include "Sht31.h"
#include "SX1276_LoRaRadio.h"

// Device credentials, register device as OTAA in The Things Network and copy credentials here
static uint8_t DEV_EUI[] = {  0x00, 0xF0, 0x0E, 0x60, 0xC4, 0x0F, 0xAB, 0x24  };
static uint8_t APP_EUI[] = { 0x70, 0xB3, 0xD5, 0x7E, 0xD0, 0x02, 0xF3, 0x16  };
static uint8_t APP_KEY[] = { 0xBF, 0x37, 0x64, 0x89, 0x2D, 0x14, 0xC9, 0xF4, 0x40, 0x4B, 0x1D, 0xA2, 0x1B, 0xE7, 0x3B, 0x7A };


// The port we're sending and receiving on
#define MBED_CONF_LORA_APP_PORT     15

// Peripherals (LoRa radio, temperature sensor and button)
SX1276_LoRaRadio radio(D11, D12, D13, D10, A0, D2, D3, D4, D5, D8, D9, NC, NC, NC, NC, A4, NC, NC);
Sht31 sht31(I2C_SDA, I2C_SCL);
InterruptIn btn(BUTTON1);
DigitalIn btn_autn(p5);
//LED1(red), LED2(yellow), LED3(blue)
Digitalout led_r(LED1), led_b(LED2);



// Global values
//unsigned long int id_received = 0x0102030405060708;
bool DEVICE_ON = false;
bool B_TX_DONE = false;

// EventQueue is required to dispatch events around
static EventQueue ev_queue;

// Constructing Mbed LoRaWANInterface and passing it down the radio object.
static LoRaWANInterface lorawan(radio);

// Application specific callbacks
static lorawan_app_callbacks_t callbacks;

// LoRaWAN stack event handler
static void lora_event_handler(lorawan_event_t event);

// Send a message over LoRaWAN
static void send_message() {
    /*uint8_t tx_buffer[50] = { 0 };

    // Sending strings over LoRaWAN is not recommended
    sprintf((char) tx_buffer, "Temperature = %3.1f",
                                   //sht31.readTemperature());

    int packet_len = strlen((char) tx_buffer); */

    /*uint8_t tx_buffer[4] = { 0 };   for a date temperature
    uint16_t temp = sht31.readTemperature()*10;
    tx_buffer[0] = 0x01;
    tx_buffer[1] = 0x67;
    tx_buffer[2] = (temp & 0xFF00) >> 8;
    tx_buffer[3] = (temp & 0x00FF);
    uint8_t tx_buffer[4]={0x01,0x067,(uint16_t(sht31.readTemperature()*10))>>8,uint16_t(sht31.readTemperature()*10)}; // another variation 

    uint8_t tx_buffer[7]={0x01,0x067,(uint16_t(sht31.readTemperature()*10))>>8,uint16_t(sht31.readTemperature()*10),0x02,0x68,uint8_t(sht31.readHumidity()*2)}; */

    uint8_t tx_buffer[4] = { 0 }; 
        unsigned int id_received = 0x04FEAB0A; // { 4, 254, 171, 10 }
        tx_buffer[0] = (id_received & 0xFF000000) >> 24;
        tx_buffer[1] = (id_received & 0x00FF0000) >> 16;
        tx_buffer[2] = (id_received & 0x0000FF00) >> 8;
        tx_buffer[3] = (id_received & 0x000000FF) ; 
        uint16_t packet_len=sizeof(tx_buffer);
    printf("Sending %u bytes: \"%s\" \n", packet_len, tx_buffer);

    int16_t retcode = lorawan.send(MBED_CONF_LORA_APP_PORT, tx_buffer, packet_len, MSG_UNCONFIRMED_FLAG);

    // for some reason send() returns -1... I cannot find out why, the stack returns the right number. I feel that this is some weird Emscripten quirk
    if (retcode < 0) {
        retcode == LORAWAN_STATUS_WOULD_BLOCK ? printf("send - duty cycle violation\n")
                : printf("send() - Error code %d\n", retcode);
        return;
    }

    printf("%d bytes scheduled for transmission\n", retcode);
    
}

int main() {
    if (DEV_EUI[0] == 0x0 && DEV_EUI[1] == 0x0 && DEV_EUI[2] == 0x0 && DEV_EUI[3] == 0x0 && DEV_EUI[4] == 0x0 && DEV_EUI[5] == 0x0 && DEV_EUI[6] == 0x0 && DEV_EUI[7] == 0x0) {
        printf("Set your LoRaWAN credentials first!\n");
        return -1;
    }
    /* printf("Please enter a 8-bytes valuer of one tag RFID\n ex. : 0x0104FEAB0C \n");
    scanf("%lu", &id_received); */

    printf("Press BUTTON1 to send the current value of tag RFID!\n");

    // Enable trace output for this demo, so we can see what the LoRaWAN stack does
    mbed_trace_init();

    if (lorawan.initialize(&ev_queue) != LORAWAN_STATUS_OK) {
        printf("LoRa initialization failed!\n");
        return -1;
    }

    // Fire a message when the button is pressed
    //btn.fall(ev_queue.event(&send_message));

    // prepare application callbacks
    callbacks.events = mbed::callback(lora_event_handler);
    lorawan.add_app_callbacks(&callbacks);

    // Disable adaptive data rating
    if (lorawan.disable_adaptive_datarate() != LORAWAN_STATUS_OK) {
        printf("disable_adaptive_datarate failed!\n");
        return -1;
    }

    lorawan.set_datarate(5); // SF7BW125

    lorawan_connect_t connect_params;
    connect_params.connect_type = LORAWAN_CONNECTION_OTAA;
    connect_params.connection_u.otaa.dev_eui = DEV_EUI;
    connect_params.connection_u.otaa.app_eui = APP_EUI;
    connect_params.connection_u.otaa.app_key = APP_KEY;
    connect_params.connection_u.otaa.nb_trials = 3;

    lorawan_status_t retcode = lorawan.connect(connect_params);

    if (retcode == LORAWAN_STATUS_OK ||
        retcode == LORAWAN_STATUS_CONNECT_IN_PROGRESS) {
    } else {
        printf("Connection error, code = %d\n", retcode);
        return -1;
    }

    printf("Connection - In Progress ...\r\n");

    // make your event queue dispatching events forever
    ev_queue.dispatch_forever();

    // state machine 
    int etat = 0;
    switch(etat)
    {
        case 0: led_r.write(1); led_b.write(0);
                btn.fall(NULL); break;

        case 1: led_r.write(0); led_b.write(1);
                btn.fall(ev_queue.event(&send_message)); break;

        case 2: led_r.write(1); led_b.write(0);
                btn.fall(NULL); break;
    }
    switch(etat)
    {
        case 0: if(DEVICE_ON==true) etat = 1; break;

        case 1: if(DEVICE_ON==false) etat = 0
                else etat = 2  ; break;

        case 2: if(B_TX_DONE = true) etat = 1; B_TX_DONE = false; break;
    }
    

    return 0;
}

// This is called from RX_DONE, so whenever a message came in
static void receive_message()
{
    uint8_t rx_buffer[50] = { 0 };
    int16_t retcode;
    retcode = lorawan.receive(MBED_CONF_LORA_APP_PORT, rx_buffer,
                              sizeof(rx_buffer),
                              MSG_CONFIRMED_FLAG|MSG_UNCONFIRMED_FLAG);

    if (retcode < 0) {
        printf("receive() - Error code %d\n", retcode);
        return;
    }

    printf("Data received on port %d (length %d): ", MBED_CONF_LORA_APP_PORT, retcode);

    for (uint8_t i = 0; i < retcode; i++) {
        printf("%02x ", rx_buffer[i]);
    }

    if(retcode == 0){
        DEVICE_ON = false;
    }else if(retcode == 1){
        DEVICE_ON = true;
    }
    printf("\n");
}

// Event handler
static void lora_event_handler(lorawan_event_t event) {
    switch (event) {
        case CONNECTED:
            printf("Connection - Successful\n");
            break;
        case DISCONNECTED:
            ev_queue.break_dispatch();
            printf("Disconnected Successfully\n");
            break;
        case TX_DONE:
            printf("Message Sent to Network Server\n");
            B_TX_DONE = true;
            break;
        case TX_TIMEOUT:
        case TX_ERROR:
        case TX_CRYPTO_ERROR:
        case TX_SCHEDULING_ERROR:
            printf("Transmission Error - EventCode = %d\n", event);
            break;
        case RX_DONE:
            printf("Received message from Network Server\n");
            receive_message();
            break;
        case RX_TIMEOUT:
        case RX_ERROR:
            printf("Error in reception - Code = %d\n", event);
            break;
        case JOIN_FAILURE:
            printf("OTAA Failed - Check Keys\n");
            break;
        default:
            MBED_ASSERT("Unknown Event");
    }
}
